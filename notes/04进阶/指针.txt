指针
通过类型作为前缀来定义一个指针’*’：var p *int。现在p 是一个指向整数值的指针。所有
新定义的变量都被赋值为其类型的零值，而指针也一样。一个新定义的或者没有任何指向的
指针，有值nil。在其他语言中，这经常被叫做空（NULL）指针，在Go 中就是nil。让指针
指向某些内容，可以使用取址操作符（&），

var p *int 定义一个指针p，他的类型是整型，值是nil

指针指向内存地址，指针是内存地址。
指针-----》内存地址  通过&操作符号，取得内存地址。

定义一个整型变量
var i int
p = &i 此时p指向i,i在内存中的地址


从指针获取值，通过在指针变量前置*来实现
比如 *p获取到i的值

指针没有运算，没有指针运算，所以如果这样写：*p++，它表示(*p)++：首先获取指针指向
的值，然后对这个值加一


从指针获取值是通过在指针变量前置’*’实现的


	var i int = 10
	fmt.Println("i的内存地址是", &i) //0xc04200c270 &用来取内存地址

	//指针变量，就是变量的类型是一个指针
	var p *int //通过在在类型前面前置*，来定义一个指针
	p = &i

	fmt.Println("p的值是", p) //0xc0420381d0 p的值存放的是i的内存地址
	//可以通过指针获取值（获取变量i的值），在指针变量p的前面前置*就可以
	fmt.Println("i的值是", *p)    // 10 通过指针获取i的值
	fmt.Println("p的内存地址是", &p) //在变量前面加上&表示取地址

	//变量-------内存地址--------值
	//i          0xc04200c270    10
	//p          0xc042022028    0xc04200c270

	*p = 8                 //改变i的值
	fmt.Println("i的值是", i) //8





